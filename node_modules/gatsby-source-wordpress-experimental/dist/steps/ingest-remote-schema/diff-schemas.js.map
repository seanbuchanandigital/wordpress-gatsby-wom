{"version":3,"sources":["../../../src/steps/ingest-remote-schema/diff-schemas.js"],"names":["checkIfSchemaHasChanged","_","pluginOptions","state","store","getState","helpers","gatsbyApi","lastCompletedSourceTime","cache","get","LAST_COMPLETED_SOURCE_TIME","activity","reporter","activityTimer","verbose","start","data","query","schemaMd5","generalSettings","url","wpUrl","parse","protocol","log","warn","cachedSchemaMd5","MD5_CACHE_KEY","foundUsableHardCachedData","key","value","schemaWasChanged","pluginOptionsMD5Key","lastPluginOptionsMD5","pluginOptionsMD5","shouldClearHardCache","info","dispatch","remoteSchema","setState","end"],"mappings":"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","sourcesContent":["import url from \"url\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport store from \"~/store\"\nimport gql from \"~/utils/gql\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { LAST_COMPLETED_SOURCE_TIME, MD5_CACHE_KEY } from \"~/constants\"\n\nimport { createContentDigest } from \"gatsby-core-utils\"\n\nimport {\n  clearHardCache,\n  getHardCachedData,\n  getHardCachedNodes,\n  setPersistentCache,\n  getPersistentCache,\n} from \"~/utils/cache\"\n\nconst checkIfSchemaHasChanged = async (_, pluginOptions) => {\n  const state = store.getState()\n\n  const { helpers } = state.gatsbyApi\n\n  let lastCompletedSourceTime = await helpers.cache.get(\n    LAST_COMPLETED_SOURCE_TIME\n  )\n\n  const activity = helpers.reporter.activityTimer(\n    formatLogMessage(`diff schemas`)\n  )\n\n  if (pluginOptions.verbose && lastCompletedSourceTime) {\n    activity.start()\n  }\n\n  const { data } = await fetchGraphql({\n    query: gql`\n      {\n        schemaMd5\n        # also get the wpUrl to save on # of requests\n        # @todo maybe there's a better place for this\n        generalSettings {\n          url\n        }\n      }\n    `,\n  })\n\n  const {\n    schemaMd5,\n    generalSettings: { url: wpUrl },\n  } = data\n\n  if (url.parse(wpUrl).protocol !== url.parse(pluginOptions.url).protocol) {\n    helpers.reporter.log(``)\n    helpers.reporter.warn(\n      formatLogMessage(`\n\nThe Url set in plugin options has a different protocol than the Url saved in WordPress general settings.\n\noptions.url: ${pluginOptions.url}\nWordPress settings: ${wpUrl}\n\nThis may cause subtle bugs, or it may be fine.\nPlease consider addressing this issue by changing your WordPress settings or plugin options accordingly.\n\n`)\n    )\n  }\n\n  let cachedSchemaMd5 = await helpers.cache.get(MD5_CACHE_KEY)\n\n  let foundUsableHardCachedData\n\n  if (!cachedSchemaMd5) {\n    cachedSchemaMd5 = await getHardCachedData({\n      key: MD5_CACHE_KEY,\n    })\n\n    foundUsableHardCachedData =\n      cachedSchemaMd5 && !!(await getHardCachedNodes())\n  }\n\n  await setPersistentCache({ key: MD5_CACHE_KEY, value: schemaMd5 })\n\n  const schemaWasChanged = schemaMd5 !== cachedSchemaMd5\n\n  const pluginOptionsMD5Key = `plugin-options-md5`\n  const lastPluginOptionsMD5 = await getPersistentCache({\n    key: pluginOptionsMD5Key,\n  })\n\n  const pluginOptionsMD5 = createContentDigest(pluginOptions)\n\n  const shouldClearHardCache =\n    schemaWasChanged || lastPluginOptionsMD5 !== pluginOptionsMD5\n\n  if (shouldClearHardCache && foundUsableHardCachedData) {\n    await clearHardCache()\n\n    foundUsableHardCachedData = false\n  }\n\n  await setPersistentCache({\n    key: pluginOptionsMD5Key,\n    value: pluginOptionsMD5,\n  })\n\n  if (\n    lastCompletedSourceTime &&\n    schemaWasChanged &&\n    pluginOptions &&\n    pluginOptions.verbose\n  ) {\n    helpers.reporter.log(``)\n    helpers.reporter.warn(\n      formatLogMessage(\n        `The remote schema has changed since the last build, re-fetching all data`\n      )\n    )\n    helpers.reporter.info(\n      formatLogMessage(`Cached schema md5: ${cachedSchemaMd5}`)\n    )\n    helpers.reporter.info(formatLogMessage(`Remote schema md5: ${schemaMd5}`))\n    helpers.reporter.log(``)\n  } else if (!lastCompletedSourceTime && pluginOptions.verbose) {\n    helpers.reporter.log(``)\n    helpers.reporter.info(\n      formatLogMessage(\n        `\\n\\n\\tThis is either your first build or the cache was cleared.\\n\\tPlease wait while your WordPress data is synced to your Gatsby cache.\\n\\n\\tMaybe now's a good time to get up and stretch? :D\\n`\n      )\n    )\n  }\n\n  // record wether the schema changed so other logic can beware\n  // as well as the wpUrl because we need this sometimes :p\n  store.dispatch.remoteSchema.setState({\n    schemaWasChanged,\n    wpUrl,\n    foundUsableHardCachedData,\n  })\n\n  if (pluginOptions.verbose && lastCompletedSourceTime) {\n    activity.end()\n  }\n\n  return schemaWasChanged\n}\n\nexport { checkIfSchemaHasChanged }\n"],"file":"diff-schemas.js"}
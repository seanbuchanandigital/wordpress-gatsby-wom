{"version":3,"sources":["../../src/steps/check-plugin-requirements.js"],"names":["parseRange","range","set","versions","Range","isARange","length","minVersion","semver","version","maxVersion","message","areRemotePluginVersionsSatisfied","helpers","disableCompatibilityCheck","url","wpGraphQLEndpoint","wpgqlIsSatisfied","wpGatsbyIsSatisfied","data","query","variables","wpgqlVersion","supportedWpPluginVersions","WPGraphQL","wpgatsbyVersion","WPGatsby","panicOnError","throwGqlErrors","wpGatsbyCompatibility","satisfies","wpGQL","wpGatsby","e","includes","reporter","panic","genericDownloadMessage","shouldDisplayWPGraphQLReason","reason","shouldDisplayWPGatsbyReason","shouldDisplayAtleastOneReason","shouldDisplayBothReasons","reasons","rangeMessage","hostname","protocol","parse","blankGetRequest","then","response","json","errors","firstError","debugMessage","catch","isWpGatsby","errorMap","from","to","isFirstRequest","prettyPermalinksAreEnabled","arePrettyPermalinksEnabled","log","warn","generalSettings","ensurePluginRequirementsAreMet","_pluginOptions","traceId","gatsbyApi","pluginOptions","debug","remoteSchema","schemaWasChanged","store","getState","isFirstBuild","key","MD5_CACHE_KEY","Promise","all"],"mappings":"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","sourcesContent":["import url from \"url\"\nimport Range from \"semver/classes/range\"\n\nimport fetchGraphql from \"~/utils/fetch-graphql\"\n\nimport { formatLogMessage } from \"~/utils/format-log-message\"\n\nimport { MD5_CACHE_KEY } from \"~/constants\"\n\nimport {\n  supportedWpPluginVersions,\n  genericDownloadMessage,\n} from \"~/supported-remote-plugin-versions\"\nimport fetch from \"node-fetch\"\nimport store from \"~/store\"\nimport { getPersistentCache } from \"~/utils/cache\"\n\nconst parseRange = (range) => {\n  const {\n    set: [versions],\n  } = new Range(range)\n\n  const isARange = versions.length >= 2\n  const minVersion = versions[0].semver.version\n  const maxVersion = versions[1]?.semver?.version\n\n  let message\n  if (isARange) {\n    message = `Install a version between ${minVersion} and ${maxVersion}.`\n  } else {\n    message = `Install version ${minVersion}.`\n  }\n\n  return {\n    message,\n    minVersion,\n    maxVersion,\n    isARange,\n  }\n}\n\nconst areRemotePluginVersionsSatisfied = async ({\n  helpers,\n  disableCompatibilityCheck,\n  url: wpGraphQLEndpoint,\n}) => {\n  if (disableCompatibilityCheck) {\n    return\n  }\n\n  let wpgqlIsSatisfied\n  let wpGatsbyIsSatisfied\n\n  try {\n    const { data } = await fetchGraphql({\n      query: /* GraphQL */ `\n        query WPGatsbyCompatibility(\n          $wpgqlVersion: String!\n          $wpgatsbyVersion: String!\n        ) {\n          wpGatsbyCompatibility(\n            wpGatsbyVersionRange: $wpgatsbyVersion\n            wpGQLVersionRange: $wpgqlVersion\n          ) {\n            satisfies {\n              wpGQL\n              wpGatsby\n            }\n          }\n        }\n      `,\n      variables: {\n        wpgqlVersion: supportedWpPluginVersions.WPGraphQL.version,\n        wpgatsbyVersion: supportedWpPluginVersions.WPGatsby.version,\n      },\n      panicOnError: false,\n      throwGqlErrors: true,\n    })\n\n    wpgqlIsSatisfied = data.wpGatsbyCompatibility.satisfies.wpGQL\n    wpGatsbyIsSatisfied = data.wpGatsbyCompatibility.satisfies.wpGatsby\n  } catch (e) {\n    if (\n      e.message.includes(\n        `Cannot query field \"wpGatsbyCompatibility\" on type \"RootQuery\".`\n      )\n    ) {\n      helpers.reporter.panic(\n        formatLogMessage(\n          `Your version of WPGatsby is too old to determine if we're compatible.${genericDownloadMessage}`\n        )\n      )\n    } else {\n      helpers.reporter.panic(e.message)\n    }\n  }\n\n  const shouldDisplayWPGraphQLReason =\n    !wpgqlIsSatisfied && supportedWpPluginVersions.WPGraphQL.reason\n\n  const shouldDisplayWPGatsbyReason =\n    !wpGatsbyIsSatisfied && supportedWpPluginVersions.WPGatsby.reason\n\n  const shouldDisplayAtleastOneReason =\n    shouldDisplayWPGraphQLReason || shouldDisplayWPGatsbyReason\n\n  const shouldDisplayBothReasons =\n    shouldDisplayWPGraphQLReason && shouldDisplayWPGatsbyReason\n\n  // a message explaining why these are the minimum versions\n  const reasons = `${shouldDisplayAtleastOneReason ? `\\n\\nReasons:\\n\\n` : ``}${\n    shouldDisplayWPGraphQLReason\n      ? `- ${supportedWpPluginVersions.WPGraphQL.reason}`\n      : ``\n  }${shouldDisplayBothReasons ? `\\n\\n` : ``}${\n    shouldDisplayWPGatsbyReason\n      ? `- ${supportedWpPluginVersions.WPGatsby.reason}`\n      : ``\n  }`\n\n  let message = ``\n\n  if (!wpgqlIsSatisfied) {\n    const { message: rangeMessage, minVersion, maxVersion } = parseRange(\n      supportedWpPluginVersions.WPGraphQL.version\n    )\n\n    message += `Your remote version of WPGraphQL is not within the accepted range (${\n      supportedWpPluginVersions.WPGraphQL.version\n    }).\n\n${rangeMessage}\n\nIf the version of WPGraphQL in your WordPress instance is lower than ${minVersion}\nit means you need to upgrade your version of WPGraphQL.\n\nIf the version of WPGraphQL in your WordPress instance is higher than ${\n      maxVersion || minVersion\n    }\nit may mean you need to upgrade your version of gatsby-source-wordpress.\n\nYou can find a matching WPGraphQL version at https://github.com/wp-graphql/wp-graphql/releases`\n  }\n\n  if (!wpGatsbyIsSatisfied && !wpgqlIsSatisfied) {\n    message += `\\n\\n---------------\\n\\n`\n  }\n\n  if (!wpGatsbyIsSatisfied) {\n    const { message: rangeMessage, minVersion, maxVersion } = parseRange(\n      supportedWpPluginVersions.WPGatsby.version\n    )\n\n    const { hostname, protocol } = url.parse(wpGraphQLEndpoint)\n\n    message += `Your remote version of WPGatsby is not within the accepted range (${\n      supportedWpPluginVersions.WPGatsby.version\n    })\n\n${rangeMessage}\n\nIf the version of WPGatsby in your WordPress instance is lower than ${minVersion}\nit means you need to upgrade your version of WPGatsby.\n\nIf the version of WPGatsby in your WordPress instance is higher than ${\n      maxVersion || minVersion\n    }\nit may mean you need to upgrade your version of gatsby-source-wordpress.\n\nDownload a matching version at https://github.com/gatsbyjs/wp-gatsby/releases\nor update via ${protocol}//${hostname}/wp-admin/plugins.php`\n  }\n\n  if (!wpGatsbyIsSatisfied || !wpgqlIsSatisfied) {\n    message += `\n${reasons}`\n  }\n\n  if (message) {\n    helpers.reporter.panic(formatLogMessage(message))\n  }\n}\n\n// This blank request is used to find debug messages\n// when a graphql request is made with no query\n// for example if 2 root fields are registered with the fieldname \"products\"\n// this will throw a helpful error message explaining that one should be removed\nconst blankGetRequest = async ({ url, helpers }) =>\n  fetch(url)\n    .then((response) => response.json())\n    .then((json) => {\n      if (json?.errors?.length) {\n        const firstError = json.errors[0]\n\n        if (\n          firstError.debugMessage ||\n          (firstError.message &&\n            !firstError.message?.includes(\n              `GraphQL Request must include at least one of those two parameters: \"query\" or \"queryId\"`\n            ))\n        ) {\n          helpers.reporter.panic(\n            formatLogMessage(`WPGraphQL returned a debug message on startup:\n\n${firstError.debugMessage || firstError.message}\n          `)\n          )\n        }\n      }\n    })\n    .catch((e) => {})\n\nconst isWpGatsby = async () =>\n  fetchGraphql({\n    query: /* GraphQL */ `\n      {\n        isWpGatsby\n      }\n    `,\n    errorMap: {\n      from: `Cannot query field \"isWpGatsby\" on type \"RootQuery\".`,\n      // @todo replace this link with another once we're out of alpha\n      to: `WPGatsby is not active in your WordPress installation.\\nTo download the latest version of WPGatsby visit https://wordpress.org/plugins/wp-gatsby/`,\n    },\n    panicOnError: true,\n    isFirstRequest: true,\n  })\n\nconst prettyPermalinksAreEnabled = async ({ helpers }) => {\n  try {\n    const { data } = await fetchGraphql({\n      query: /* GraphQL */ `\n        {\n          generalSettings {\n            url\n          }\n          wpGatsby {\n            arePrettyPermalinksEnabled\n          }\n        }\n      `,\n      throwGqlErrors: true,\n    })\n\n    if (!data.wpGatsby.arePrettyPermalinksEnabled) {\n      helpers.reporter.log(``)\n      helpers.reporter.warn(\n        formatLogMessage(`\nPretty permalinks are not enabled in your WordPress instance.\nGatsby routing requires this setting to function properly.\nPlease enable pretty permalinks by changing your settings at\n${data.generalSettings.url}/wp-admin/options-permalink.php.\n`)\n      )\n    }\n  } catch (e) {\n    // the WPGatsby version is too old to query for wpGatsby.arePrettyPermalinksEnabled\n  }\n}\n\nconst ensurePluginRequirementsAreMet = async (helpers, _pluginOptions) => {\n  if (helpers.traceId === `refresh-createSchemaCustomization`) {\n    return\n  }\n\n  const {\n    gatsbyApi: {\n      pluginOptions: {\n        url,\n        debug: { disableCompatibilityCheck },\n      },\n    },\n    remoteSchema: { schemaWasChanged },\n  } = store.getState()\n\n  // if we don't have a cached remote schema MD5, this is a cold build\n  const isFirstBuild = !(await getPersistentCache({ key: MD5_CACHE_KEY }))\n\n  if (!schemaWasChanged && !isFirstBuild) {\n    return\n  }\n\n  await blankGetRequest({ url, helpers })\n  await isWpGatsby()\n\n  await Promise.all([\n    prettyPermalinksAreEnabled({ helpers }),\n    areRemotePluginVersionsSatisfied({\n      helpers,\n      url,\n      disableCompatibilityCheck,\n    }),\n  ])\n}\n\nexport { ensurePluginRequirementsAreMet }\n"],"file":"check-plugin-requirements.js"}
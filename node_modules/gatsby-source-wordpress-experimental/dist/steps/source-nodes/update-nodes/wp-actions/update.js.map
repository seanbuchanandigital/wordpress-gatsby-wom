{"version":3,"sources":["../../../../../src/steps/source-nodes/update-nodes/wp-actions/update.js"],"names":["getDbIdFromRelayId","relayId","split","reverse","normalizeUri","uri","id","singleName","replace","endsWith","slice","startsWith","dbId","fetchAndCreateSingleNode","actionType","cachedNodeIds","isNewPostDraft","isDraft","previewId","token","nodeQuery","previewQuery","query","helpers","reporter","log","warn","node","headers","WPGatsbyPreview","data","variables","errorContext","remoteNode","title","additionalNodeIds","createSingleNode","info","state","store","getState","pluginOptions","gatsbyApi","wpUrl","remoteSchema","typeInfo","key","CREATED_NODE_IDS","updatedNodeContent","nodeType","nodesTypeName","type","processedNode","actions","createContentDigest","parent","internal","contentDigest","typeSettings","name","cancelUpdate","beforeChangeNode","receivedAdditionalNodeIds","receivedRemoteNode","receivedCancelUpdate","fetchGraphql","buildTypeName","wpStore","createNode","push","length","forEach","value","wpActionUPDATE","wpAction","reportUpdate","setAction","chalk","bold","toLowerCase","referencedNodeSingularName","referencedNodeID","verbose","getNode","nodeId","referencedNodeGlobalRelayID","existingNode","referencedNodeStatus","validNodeIds","filter","cachedId","touchNode","deleteNode","nodeEntries","Object","entries","includes","italic"],"mappings":"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","sourcesContent":["import fetchGraphql from \"~/utils/fetch-graphql\"\nimport store from \"~/store\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport chalk from \"chalk\"\nimport { getQueryInfoBySingleFieldName } from \"../../helpers\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { CREATED_NODE_IDS } from \"~/constants\"\n// import { findConnectedNodeIds } from \"~/steps/source-nodes/create-nodes/create-nodes\"\n\nimport { atob } from \"atob\"\n\nimport {\n  buildTypeName,\n  getTypeSettingsByType,\n} from \"~/steps/create-schema-customization/helpers\"\nimport { processNode } from \"~/steps/source-nodes/create-nodes/process-node\"\nimport { getPersistentCache, setPersistentCache } from \"~/utils/cache\"\n\nconst getDbIdFromRelayId = (relayId) => atob(relayId).split(`:`).reverse()[0]\n\nconst normalizeUri = ({ uri, id, singleName }) => {\n  // remove the preview query params as they're not relevant in Gatsby\n  uri = uri?.replace(`preview=true`, ``)\n\n  // if removing the preview string leaves us with either of these\n  // characters at the end, trim em off!\n  if (uri?.endsWith(`?`) || uri?.endsWith(`&`)) {\n    uri = uri.slice(0, -1)\n  }\n\n  // if this is a draft url which could look like\n  // this /?p=543534 or /?page=4324 or /?something=yep&page=543543 or /?p=4534&what=yes\n  // we will create a proper path that Gatsby can handle\n  // /post_graphql_name/post_db_id/\n  // this same logic is on the WP side in the preview template\n  // to account for this situation.\n  if (uri?.startsWith(`/?`)) {\n    const dbId = getDbIdFromRelayId(id)\n\n    return `/${singleName}/${dbId}/`\n  }\n\n  return uri\n}\n\nexport const fetchAndCreateSingleNode = async ({\n  singleName,\n  id,\n  actionType,\n  cachedNodeIds,\n  isNewPostDraft,\n  isDraft,\n  previewId = null,\n  token = null,\n}) => {\n  const { nodeQuery, previewQuery } =\n    getQueryInfoBySingleFieldName(singleName) || {}\n\n  // if this is a preview use the preview query\n  // if it's a preview but it's the initial blank node\n  // then use the regular node query as the preview query wont\n  // return anything\n  const query =\n    previewId && !isNewPostDraft && !isDraft ? previewQuery : nodeQuery\n\n  const {\n    helpers: { reporter },\n  } = getGatsbyApi()\n\n  if (!query) {\n    reporter.log(``)\n    reporter.warn(\n      formatLogMessage(\n        `A ${singleName} was updated, but no query was found for this node type.`\n      )\n    )\n    reporter.log(``)\n\n    return { node: null }\n  }\n\n  const headers = token\n    ? {\n        // don't change this header..\n        // underscores and the word auth are being\n        // stripped on the php side for some reason\n        WPGatsbyPreview: token,\n      }\n    : {}\n\n  let { data } = await fetchGraphql({\n    headers,\n    query,\n    variables: {\n      id,\n    },\n    errorContext: `Error occured while updating a single \"${singleName}\" node.`,\n  })\n\n  let remoteNode = data[singleName]\n\n  if (remoteNode?.title === `Auto Draft` && isNewPostDraft) {\n    // for UX reasons we don't want to display Auto Draft as a title\n    // in the preview window for new draft posts\n    remoteNode.title = ``\n  }\n\n  // if we ask for a node that doesn't exist\n  // and this isn't the initial blank node sent over when a new post\n  // is created in a preview instance\n  if (!data || (data && remoteNode === null && !isNewPostDraft)) {\n    reporter.log(``)\n    reporter.warn(\n      formatLogMessage(\n        `${id} ${singleName} was updated, but no data was returned for this node.`\n      )\n    )\n    reporter.log(``)\n\n    return { node: null }\n  }\n\n  remoteNode.uri = normalizeUri({\n    uri: remoteNode.uri,\n    singleName,\n    id,\n  })\n\n  data[singleName] = remoteNode\n\n  // returns an object\n  const { additionalNodeIds, node } = await createSingleNode({\n    singleName,\n    id,\n    actionType,\n    data,\n    cachedNodeIds,\n  })\n\n  if (previewId && !isNewPostDraft) {\n    reporter.log(``)\n    reporter.info(\n      formatLogMessage(\n        `Preview for ${singleName} ${previewId} was updated at ${node.uri}.`\n      )\n    )\n    reporter.log(``)\n  } else if (isNewPostDraft) {\n    reporter.log(``)\n    reporter.info(\n      formatLogMessage(\n        `Blank node for ${singleName} draft ${previewId} was created at ${node.uri}.`\n      )\n    )\n    reporter.log(``)\n  }\n\n  return { node, additionalNodeIds } || null\n}\n\nexport const createSingleNode = async ({\n  singleName,\n  id,\n  actionType,\n  data,\n  cachedNodeIds,\n}) => {\n  const state = store.getState()\n  const { helpers, pluginOptions } = state.gatsbyApi\n  const { wpUrl } = state.remoteSchema\n\n  const { typeInfo } = getQueryInfoBySingleFieldName(singleName)\n\n  if (!cachedNodeIds) {\n    cachedNodeIds = await getPersistentCache({ key: CREATED_NODE_IDS })\n  }\n\n  const updatedNodeContent = {\n    ...data[singleName],\n    nodeType: typeInfo.nodesTypeName,\n    type: typeInfo.nodesTypeName,\n  }\n\n  const processedNode = await processNode({\n    node: updatedNodeContent,\n    pluginOptions,\n    wpUrl,\n    helpers,\n  })\n\n  const { actions } = helpers\n\n  const { createContentDigest } = helpers\n\n  let remoteNode = {\n    ...processedNode,\n    id: id,\n    parent: null,\n    internal: {\n      contentDigest: createContentDigest(updatedNodeContent),\n      type: buildTypeName(typeInfo.nodesTypeName),\n    },\n  }\n\n  /**\n   * @todo This commented code will be used to refetch connected nodes that might need to be connected back to this node but aren't currently\n   * see the note at the top find-connected-nodes.js for more info\n   */\n  // const connectedNodeIds = findConnectedNodeIds(updatedNodeContent) || []\n  // .filter(\n  //   async childNodeId => {\n  //     const childNode = await getNode(childNodeId)\n  //     return childNode\n  //   }\n  // )\n\n  // if (connectedNodeIds && connectedNodeIds.length) {\n  //   dump(childNodeIds)\n  // } else {\n  //   dump(remoteNode)\n  //   helpers.reporter.info(`no children for ${singleName}`)\n  // }\n\n  const typeSettings = getTypeSettingsByType({\n    name: typeInfo.nodesTypeName,\n  })\n\n  let additionalNodeIds\n  let cancelUpdate\n\n  if (\n    typeSettings.beforeChangeNode &&\n    typeof typeSettings.beforeChangeNode === `function`\n  ) {\n    const {\n      additionalNodeIds: receivedAdditionalNodeIds,\n      remoteNode: receivedRemoteNode,\n      cancelUpdate: receivedCancelUpdate,\n    } =\n      (await typeSettings.beforeChangeNode({\n        actionType: actionType,\n        remoteNode,\n        actions,\n        helpers,\n        fetchGraphql,\n        typeSettings,\n        buildTypeName,\n        type: typeInfo.nodesTypeName,\n        wpStore: store,\n      })) || {}\n\n    additionalNodeIds = receivedAdditionalNodeIds\n    cancelUpdate = receivedCancelUpdate\n\n    if (receivedRemoteNode) {\n      remoteNode = receivedRemoteNode\n    }\n  }\n\n  if (cancelUpdate) {\n    return {\n      additionalNodeIds,\n      remoteNode: null,\n    }\n  }\n\n  if (remoteNode) {\n    actions.createNode(remoteNode)\n\n    cachedNodeIds.push(remoteNode.id)\n\n    if (additionalNodeIds && additionalNodeIds.length) {\n      additionalNodeIds.forEach((id) => cachedNodeIds.push(id))\n    }\n\n    await setPersistentCache({ key: CREATED_NODE_IDS, value: cachedNodeIds })\n  }\n\n  return { additionalNodeIds, node: remoteNode }\n}\n\nconst wpActionUPDATE = async ({\n  helpers,\n  wpAction,\n  // intervalRefetching,\n}) => {\n  const reportUpdate = ({ setAction } = {}) => {\n    const actionType = setAction || wpAction.actionType\n\n    reporter.log(``)\n    reporter.info(\n      formatLogMessage(\n        `${chalk.bold(\n          `${actionType.toLowerCase()} ${wpAction.referencedNodeSingularName}`\n        )} ${wpAction.title} (#${wpAction.referencedNodeID})`\n      )\n    )\n    reporter.log(``)\n  }\n\n  const { reporter, actions } = helpers\n\n  let cachedNodeIds = await getPersistentCache({ key: CREATED_NODE_IDS })\n\n  const state = store.getState()\n  const {\n    gatsbyApi: {\n      pluginOptions: { verbose },\n      helpers: { getNode },\n    },\n  } = state\n\n  const nodeId = wpAction.referencedNodeGlobalRelayID\n\n  const existingNode = await getNode(nodeId)\n\n  if (wpAction.referencedNodeStatus !== `publish`) {\n    // if the post status isn't publish anymore, we need to remove the node\n    // by removing it from cached nodes so it's garbage collected by Gatsby\n    const validNodeIds = cachedNodeIds.filter((cachedId) => cachedId !== nodeId)\n\n    await setPersistentCache({ key: CREATED_NODE_IDS, value: validNodeIds })\n\n    if (existingNode) {\n      await actions.touchNode({ nodeId })\n      await actions.deleteNode({ node: existingNode })\n      reportUpdate({ setAction: `DELETE` })\n    }\n\n    return\n  }\n\n  const { node } = await fetchAndCreateSingleNode({\n    id: nodeId,\n    actionType: wpAction.actionType,\n    singleName: wpAction.referencedNodeSingularName,\n    cachedNodeIds,\n  })\n\n  if (node) {\n    reportUpdate()\n\n    if (verbose) {\n      const nodeEntries = existingNode ? Object.entries(existingNode) : null\n\n      if (nodeEntries?.length) {\n        nodeEntries\n          .filter(([key]) => !key.includes(`modifiedGmt`) && key !== `modified`)\n          ?.forEach(([key, value]) => {\n            if (!node || !node[key] || !value) {\n              return\n            }\n\n            if (\n              // if the value of this field changed, log it\n              typeof node[key] === `string` &&\n              value !== node[key]\n            ) {\n              reporter.log(``)\n              reporter.info(chalk.bold(`${key} changed`))\n\n              if (value.length < 250 && node[key].length < 250) {\n                reporter.log(``)\n                reporter.log(`${chalk.italic.bold(`    from`)}`)\n                reporter.log(`      ${value}`)\n                reporter.log(chalk.italic.bold(`    to`))\n                reporter.log(`      ${node[key]}`)\n                reporter.log(``)\n              }\n            }\n          })\n\n        reporter.log(``)\n      }\n    }\n  }\n\n  // return cachedNodeIds\n}\n\nexport default wpActionUPDATE\n"],"file":"update.js"}
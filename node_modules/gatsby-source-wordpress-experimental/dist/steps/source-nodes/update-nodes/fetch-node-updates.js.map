{"version":3,"sources":["../../../../src/steps/source-nodes/update-nodes/fetch-node-updates.js"],"names":["touchValidNodes","helpers","actions","validNodeIds","key","CREATED_NODE_IDS","forEach","nodeId","touchNode","fetchAndApplyNodeUpdates","since","intervalRefetching","throwFetchErrors","throwGqlErrors","pluginOptions","cache","reporter","activity","activityTimer","start","get","LAST_COMPLETED_SOURCE_TIME","wpActions","didUpdate","end"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEO,MAAMA,eAAe,GAAG,YAAY;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAc,iCAApB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcD,OAApB;AAEA,MAAIE,YAAY,GAAG,MAAM,+BAAmB;AAAEC,IAAAA,GAAG,EAAEC;AAAP,GAAnB,CAAzB;AACAF,EAAAA,YAAY,CAACG,OAAb,CAAsBC,MAAD,IAAYL,OAAO,CAACM,SAAR,CAAkB;AAAED,IAAAA;AAAF,GAAlB,CAAjC;AACD,CANM;AAQP;;;;;;;;;;;AAOA,MAAME,wBAAwB,GAAG,OAAO;AACtCC,EAAAA,KADsC;AAEtCC,EAAAA,kBAFsC;AAGtCC,EAAAA,gBAAgB,GAAG,KAHmB;AAItCC,EAAAA,cAAc,GAAG;AAJqB,CAAP,KAK3B;AACJ,QAAM;AAAEZ,IAAAA,OAAF;AAAWa,IAAAA;AAAX,MAA6B,iCAAnC;AAEA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBf,OAA5B;AAEA,MAAIgB,QAAJ;;AAEA,MAAI,CAACN,kBAAL,EAAyB;AACvBM,IAAAA,QAAQ,GAAGD,QAAQ,CAACE,aAAT,CACT,wCAAkB,+BAAlB,CADS,CAAX;AAGAD,IAAAA,QAAQ,CAACE,KAAT;AACD;;AAED,MAAI,CAACT,KAAL,EAAY;AACVA,IAAAA,KAAK,GAAG,MAAMK,KAAK,CAACK,GAAN,CAAUC,qCAAV,CAAd;AACD,GAhBG,CAkBJ;;;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA2B,MAAM,qCAAqB;AAC1Db,IAAAA,KAD0D;AAE1DC,IAAAA,kBAF0D;AAG1DV,IAAAA,OAH0D;AAI1Da,IAAAA,aAJ0D;AAK1DF,IAAAA,gBAL0D;AAM1DC,IAAAA;AAN0D,GAArB,CAAvC;;AASA,OACE;AACA;AACAU,EAAAA,SAAS,IACT;AACA;AACA,GAACZ,kBANH,EAOE;AACA,UAAMX,eAAe,EAArB;AACD;;AAED,MAAI,CAACW,kBAAL,EAAyB;AACvBM,IAAAA,QAAQ,CAACO,GAAT;AACD;;AAED,SAAO;AAAEF,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAAP;AACD,CAjDD;;eAmDed,wB","sourcesContent":["import { CREATED_NODE_IDS, LAST_COMPLETED_SOURCE_TIME } from \"~/constants\"\nimport { fetchAndRunWpActions } from \"./wp-actions\"\nimport { formatLogMessage } from \"~/utils/format-log-message\"\nimport { getGatsbyApi } from \"~/utils/get-gatsby-api\"\nimport { getPersistentCache } from \"~/utils/cache\"\n\nexport const touchValidNodes = async () => {\n  const { helpers } = getGatsbyApi()\n  const { actions } = helpers\n\n  let validNodeIds = await getPersistentCache({ key: CREATED_NODE_IDS })\n  validNodeIds.forEach((nodeId) => actions.touchNode({ nodeId }))\n}\n\n/**\n * fetchAndApplyNodeUpdates\n *\n * uses query info (types and gql query strings) fetched/generated in\n * onPreBootstrap to ask WordPress for the latest changes, and then\n * apply creates, updates, and deletes to Gatsby nodes\n */\nconst fetchAndApplyNodeUpdates = async ({\n  since,\n  intervalRefetching,\n  throwFetchErrors = false,\n  throwGqlErrors = false,\n}) => {\n  const { helpers, pluginOptions } = getGatsbyApi()\n\n  const { cache, reporter } = helpers\n\n  let activity\n\n  if (!intervalRefetching) {\n    activity = reporter.activityTimer(\n      formatLogMessage(`pull updates since last build`)\n    )\n    activity.start()\n  }\n\n  if (!since) {\n    since = await cache.get(LAST_COMPLETED_SOURCE_TIME)\n  }\n\n  // Check with WPGQL to create, delete, or update cached WP nodes\n  const { wpActions, didUpdate } = await fetchAndRunWpActions({\n    since,\n    intervalRefetching,\n    helpers,\n    pluginOptions,\n    throwFetchErrors,\n    throwGqlErrors,\n  })\n\n  if (\n    // if we're refetching, we only want to touch all nodes\n    // if something changed\n    didUpdate ||\n    // if this is a regular build, we want to touch all nodes\n    // so they don't get garbage collected\n    !intervalRefetching\n  ) {\n    await touchValidNodes()\n  }\n\n  if (!intervalRefetching) {\n    activity.end()\n  }\n\n  return { wpActions, didUpdate }\n}\n\nexport default fetchAndApplyNodeUpdates\n"],"file":"fetch-node-updates.js"}
{"version":3,"sources":["../../../../src/steps/source-nodes/fetch-nodes/fetch-referenced-media-items.js"],"names":["nodeFetchConcurrency","concurrency","Number","process","env","GATSBY_CONCURRENT_DOWNLOAD","adjustedConcurrency","normalizedConcurrency","mediaFileFetchQueue","PQueue","carryoverConcurrencyCount","mediaNodeFetchQueue","previouslyRetriedPromises","pushPromiseOntoRetryQueue","node","helpers","createContentDigest","actions","queue","retryKey","retryPromise","add","timesRetried","Promise","resolve","setTimeout","error","reporter","info","panic","createMediaItemNode","referencedMediaItemNodeIds","parentName","allMediaItemNodes","existingNode","getNode","id","store","dispatch","logger","incrementActivityTimer","typeName","by","push","resolveFutureNode","futureNode","mediaItemUrl","localFileNode","mediaItemNode","localFile","parent","internal","contentDigest","type","normalizedNode","nodeTypeName","createNode","urlToFileExtension","url","pathname","urlUtil","parse","fileExtension","path","extname","stripImageSizesFromUrl","imageSizesPattern","RegExp","urlWithoutSizes","replace","createScaledImageUrl","isAlreadyScaled","includes","scaledUrl","processAndDedupeImageUrls","urls","reduce","accumulator","strippedUrl","scaledStrippedUrl","fetchMediaItemsBySourceUrl","mediaItemUrls","selectionSet","builtFragments","perPage","processedMediaItemUrls","cachedMediaItemNodeIds","uncachedMediaItemUrls","previouslyCachedMediaItemNodes","all","map","nodeId","mediaItemUrlsPages","resolveFutureNodes","futureNodes","nodes","length","index","sourceUrls","entries","join","query","sourceUrl","data","variables","first","after","errorContext","thisPagesNodes","Object","values","filter","Boolean","forEach","imageNodes","pushNodeMeta","modifiedGmt","onIdle","fetchMediaItemsById","mediaItemIds","settings","typeInfo","newMediaItemIds","nodesPerFetch","chunkedIds","relayIds","ids","split","slice","allNodesOfContentType","contentTypePlural","pluralName","nodesTypeName","in","throwFetchErrors","fetchReferencedMediaItemsAndCreateNodes","state","getState","queryInfo","remoteSchema","nodeQueries","mediaItems","pluginOptions","gatsbyApi","createdNodes","nodesSourcedById","nodesSourcedByUrl"],"mappings":"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","sourcesContent":["import chunk from \"lodash/chunk\"\nimport store from \"~/store\"\nimport atob from \"atob\"\nimport PQueue from \"p-queue\"\nimport { createRemoteMediaItemNode } from \"../create-nodes/create-remote-media-item-node\"\nimport { paginatedWpNodeFetch, normalizeNode } from \"./fetch-nodes-paginated\"\nimport { buildTypeName } from \"~/steps/create-schema-customization/helpers\"\nimport fetchGraphql from \"~/utils/fetch-graphql\"\nimport { getFileNodeMetaBySourceUrl } from \"~/steps/source-nodes/create-nodes/create-remote-media-item-node\"\nimport uniq from \"lodash/uniq\"\nimport urlUtil from \"url\"\nimport path from \"path\"\n\nconst nodeFetchConcurrency = 2\n\nconst concurrency = Number(process.env.GATSBY_CONCURRENT_DOWNLOAD ?? 200)\nconst adjustedConcurrency = Number(concurrency ?? 200) - nodeFetchConcurrency\nconst normalizedConcurrency =\n  adjustedConcurrency <= nodeFetchConcurrency\n    ? concurrency\n    : adjustedConcurrency\n\nconst mediaFileFetchQueue = new PQueue({\n  concurrency: normalizedConcurrency,\n  carryoverConcurrencyCount: true,\n})\n\nconst mediaNodeFetchQueue = new PQueue({\n  concurrency: nodeFetchConcurrency,\n  carryoverConcurrencyCount: true,\n})\n\nconst previouslyRetriedPromises = {}\n\nconst pushPromiseOntoRetryQueue = ({\n  node,\n  helpers,\n  createContentDigest,\n  actions,\n  queue,\n  retryKey,\n  retryPromise,\n}) => {\n  queue.add(async () => {\n    const timesRetried = previouslyRetriedPromises[retryKey] || 0\n\n    if (timesRetried >= 2) {\n      // if we've retried this more than once, pause for a sec.\n      await new Promise((resolve) =>\n        setTimeout(() => resolve(), timesRetried * 500)\n      )\n    }\n\n    try {\n      await retryPromise({\n        createContentDigest,\n        actions,\n        helpers,\n        node,\n        queue,\n        retryKey,\n        retryPromise,\n        timesRetried,\n      })\n    } catch (error) {\n      // Errors that should exit are handled one level down\n      // in createRemoteMediaItemNode\n      //\n      // if we haven't reqeued this before,\n      // add it to the end of the queue to\n      // try once more later\n      if (timesRetried < 5) {\n        if (timesRetried > 1) {\n          helpers.reporter.info(\n            `pushing ${retryKey} to the end of the request queue.`\n          )\n\n          helpers.reporter.info(\n            `Previously retried ${timesRetried} times already.`\n          )\n        }\n\n        previouslyRetriedPromises[retryKey] = timesRetried + 1\n\n        pushPromiseOntoRetryQueue({\n          node,\n          helpers,\n          createContentDigest,\n          actions,\n          queue,\n          retryKey,\n          retryPromise,\n        })\n      } else {\n        helpers.reporter.info(\n          `\\n\\nalready re-queued ${retryKey} 5 times :( sorry.\\nTry lowering process.env.GATSBY_CONCURRENT_DOWNLOAD.\\nIt's currently set to ${process.env.GATSBY_CONCURRENT_DOWNLOAD}\\n\\n`\n        )\n        // we already tried this earlier in the queue\n        // no choice but to give up :(\n        helpers.reporter.panic(error)\n      }\n    }\n  })\n}\n\nexport const createMediaItemNode = async ({\n  node,\n  helpers,\n  createContentDigest,\n  actions,\n  referencedMediaItemNodeIds,\n  parentName,\n  allMediaItemNodes = [],\n}) => {\n  const existingNode = await helpers.getNode(node.id)\n\n  if (existingNode) {\n    return existingNode\n  }\n\n  store.dispatch.logger.incrementActivityTimer({\n    typeName: `MediaItem`,\n    by: 1,\n  })\n\n  allMediaItemNodes.push(node)\n\n  let resolveFutureNode\n  let futureNode = new Promise((resolve) => {\n    resolveFutureNode = resolve\n  })\n\n  pushPromiseOntoRetryQueue({\n    node,\n    helpers,\n    createContentDigest,\n    actions,\n    queue: mediaFileFetchQueue,\n    retryKey: node.mediaItemUrl,\n    retryPromise: async ({\n      createContentDigest,\n      actions,\n      helpers,\n      node,\n      retryKey,\n      timesRetried,\n    }) => {\n      let localFileNode = await createRemoteMediaItemNode({\n        mediaItemNode: node,\n        helpers,\n        parentName,\n      })\n\n      if (timesRetried > 1) {\n        helpers.reporter.info(\n          `Successfully fetched ${retryKey} after retrying ${timesRetried} times`\n        )\n      }\n\n      if (!localFileNode) {\n        return resolveFutureNode(null)\n      }\n\n      node = {\n        ...node,\n        localFile: {\n          id: localFileNode.id,\n        },\n        parent: null,\n        internal: {\n          contentDigest: createContentDigest(node),\n          type: buildTypeName(`MediaItem`),\n        },\n      }\n\n      const normalizedNode = normalizeNode({ node, nodeTypeName: `MediaItem` })\n\n      await actions.createNode(normalizedNode)\n      resolveFutureNode(node)\n    },\n  })\n\n  return futureNode\n}\n\nconst urlToFileExtension = (url) => {\n  const { pathname } = urlUtil.parse(url)\n\n  const fileExtension = path.extname(pathname)\n\n  return fileExtension\n}\n\nexport const stripImageSizesFromUrl = (url) => {\n  const fileExtension = urlToFileExtension(url)\n\n  const imageSizesPattern = new RegExp(\n    `(?:[-_]([0-9]+)x([0-9]+))${fileExtension ? `\\.${fileExtension}` : ``}`\n  )\n\n  let urlWithoutSizes = url.replace(imageSizesPattern, \"\")\n\n  if (urlWithoutSizes !== url && fileExtension) {\n    urlWithoutSizes = `${urlWithoutSizes}${fileExtension}`\n  }\n\n  return urlWithoutSizes\n}\n\nconst createScaledImageUrl = (url) => {\n  const fileExtension = urlToFileExtension(url)\n\n  const isAlreadyScaled = url.includes(`-scaled${fileExtension || ``}`)\n\n  if (isAlreadyScaled) {\n    return url\n  }\n\n  let scaledUrl\n\n  if (fileExtension) {\n    scaledUrl = url.replace(fileExtension, `-scaled${fileExtension}`)\n  } else {\n    scaledUrl = `${url}-scaled`\n  }\n\n  return scaledUrl\n}\n\n// takes an array of image urls and returns them + additional urls if\n// any of the provided image urls contain what appears to be an image resize signifier\n// for ex https://site.com/wp-content/uploads/01/your-image-500x1000.jpeg\n// that will add https://site.com/wp-content/uploads/01/your-image.jpeg to the array\n// this is necessary because we can only get image nodes by the full source url.\n// simply removing image resize signifiers from all urls would be a mistake since\n// someone could upload a full-size image that contains that pattern - so the full\n// size url would have 500x1000 in it, and removing it would make it so we can never\n// fetch this image node.\nconst processAndDedupeImageUrls = (urls) =>\n  uniq(\n    urls.reduce((accumulator, url) => {\n      const scaledUrl = createScaledImageUrl(url)\n      accumulator.push(scaledUrl)\n\n      const strippedUrl = stripImageSizesFromUrl(url)\n\n      // if the url had no image sizes, don't do anything special\n      if (strippedUrl === url) {\n        return accumulator\n      }\n\n      accumulator.push(strippedUrl)\n\n      const scaledStrippedUrl = createScaledImageUrl(strippedUrl)\n      accumulator.push(scaledStrippedUrl)\n\n      return accumulator\n    }, urls)\n  )\n\nconst fetchMediaItemsBySourceUrl = async ({\n  mediaItemUrls,\n  selectionSet,\n  builtFragments,\n  createContentDigest,\n  actions,\n  helpers,\n  allMediaItemNodes = [],\n}) => {\n  const perPage = 100\n  const processedMediaItemUrls = processAndDedupeImageUrls(mediaItemUrls)\n\n  const {\n    cachedMediaItemNodeIds,\n    uncachedMediaItemUrls,\n  } = processedMediaItemUrls.reduce(\n    (accumulator, url) => {\n      const { id } = getFileNodeMetaBySourceUrl(url) || {}\n\n      // if we have a cached image and we haven't already recorded this cached image\n      if (id && !accumulator.cachedMediaItemNodeIds.includes(id)) {\n        // save it\n        accumulator.cachedMediaItemNodeIds.push(id)\n      } else if (!id) {\n        // otherwise we need to fetch this media item by url\n        accumulator.uncachedMediaItemUrls.push(url)\n      }\n\n      return accumulator\n    },\n    { cachedMediaItemNodeIds: [], uncachedMediaItemUrls: [] }\n  )\n\n  // take our previously cached id's and get nodes for them\n  const previouslyCachedMediaItemNodes = await Promise.all(\n    cachedMediaItemNodeIds.map(async (nodeId) => helpers.getNode(nodeId))\n  )\n\n  // chunk up all our uncached media items\n  const mediaItemUrlsPages = chunk(uncachedMediaItemUrls, perPage)\n\n  // since we're using an async queue, we need a way to know when it's finished\n  // we pass this resolve function into the queue function so it can let us\n  // know when it's finished\n  let resolveFutureNodes\n  let futureNodes = new Promise((resolve) => {\n    resolveFutureNodes = (nodes = []) =>\n      // combine our resolved nodes we fetched with our cached nodes\n      resolve([...nodes, ...previouslyCachedMediaItemNodes])\n  })\n\n  // we have no media items to fetch,\n  // so we need to resolve this promise\n  // otherwise it will never resolve below.\n  if (!mediaItemUrlsPages.length) {\n    resolveFutureNodes()\n  }\n\n  // for all the images we don't have cached, loop through and get them all\n  for (const [index, sourceUrls] of mediaItemUrlsPages.entries()) {\n    pushPromiseOntoRetryQueue({\n      helpers,\n      createContentDigest,\n      actions,\n      queue: mediaNodeFetchQueue,\n      retryKey: `Media Item by sourceUrl query #${index}, digest: ${createContentDigest(\n        sourceUrls.join()\n      )}`,\n      retryPromise: async () => {\n        const query = /* GraphQL */ `\n          query MEDIA_ITEMS {\n            ${sourceUrls\n              .map(\n                (sourceUrl, index) => /* GraphQL */ `\n              mediaItem__index_${index}: mediaItem(id: \"${sourceUrl}\", idType: SOURCE_URL) {\n                ...MediaItemFragment\n              }\n            `\n              )\n              .join(` `)}\n          }\n\n          fragment MediaItemFragment on MediaItem {\n            ${selectionSet}\n          }\n\n          ${builtFragments || ``}\n        `\n\n        const { data } = await fetchGraphql({\n          query,\n          variables: {\n            first: perPage,\n            after: null,\n          },\n          errorContext: `Error occured while fetching \"MediaItem\" nodes in inline html.`,\n        })\n\n        // since we're getting each media item on it's single node root field\n        // we just needs the values of each property in the response\n        // anything that returns null is because we tried to get the source url\n        // plus the source url minus resize patterns. So there will be nulls\n        // since only the full source url will return data\n        const thisPagesNodes = Object.values(data).filter(Boolean)\n\n        // take the WPGraphQL nodes we received and create Gatsby nodes out of them\n        const nodes = await Promise.all(\n          thisPagesNodes.map((node) =>\n            createMediaItemNode({\n              node,\n              helpers,\n              createContentDigest,\n              actions,\n              allMediaItemNodes,\n              parentName: `Fetching referenced MediaItem nodes by sourceUrl`,\n            })\n          )\n        )\n\n        nodes.forEach((node, index) => {\n          if (!node) {\n            return\n          }\n\n          // this is how we're caching nodes we've previously fetched.\n          store.dispatch.imageNodes.pushNodeMeta({\n            id: node.localFile.id,\n            sourceUrl: sourceUrls[index],\n            modifiedGmt: node.modifiedGmt,\n          })\n        })\n\n        resolveFutureNodes(nodes)\n      },\n    })\n  }\n\n  await mediaNodeFetchQueue.onIdle()\n  await mediaFileFetchQueue.onIdle()\n\n  return futureNodes\n}\n\nconst fetchMediaItemsById = async ({\n  mediaItemIds,\n  settings,\n  url,\n  selectionSet,\n  builtFragments,\n  createContentDigest,\n  actions,\n  helpers,\n  typeInfo,\n}) => {\n  const newMediaItemIds = mediaItemIds.filter((id) => !helpers.getNode(id))\n\n  const nodesPerFetch = 100\n  const chunkedIds = chunk(newMediaItemIds, nodesPerFetch)\n\n  let resolveFutureNodes\n  let futureNodes = new Promise((resolve) => {\n    resolveFutureNodes = resolve\n  })\n\n  if (!newMediaItemIds.length) {\n    resolveFutureNodes([])\n  }\n\n  let allMediaItemNodes = []\n\n  for (const [index, relayIds] of chunkedIds.entries()) {\n    pushPromiseOntoRetryQueue({\n      helpers,\n      createContentDigest,\n      actions,\n      queue: mediaNodeFetchQueue,\n      retryKey: `Media Item query #${index}, digest: ${createContentDigest(\n        relayIds.join()\n      )}`,\n      retryPromise: async () => {\n        // relay id's are base64 encoded from strings like attachment:89381\n        // where 89381 is the id we want for our query\n        // so we split on the : and get the last item in the array, which is the id\n        // once we can get a list of media items by relay id's, we can remove atob\n        const ids = relayIds.map((id) => atob(id).split(`:`).slice(-1)[0])\n\n        const query = `\n          query MEDIA_ITEMS($in: [ID]) {\n            mediaItems(first: ${nodesPerFetch}, where:{ in: $in }) {\n              nodes {\n                ${selectionSet}\n              }\n            }\n          }\n\n          ${builtFragments || ``}\n        `\n\n        const allNodesOfContentType = await paginatedWpNodeFetch({\n          first: nodesPerFetch,\n          contentTypePlural: typeInfo.pluralName,\n          nodeTypeName: typeInfo.nodesTypeName,\n          query,\n          url,\n          helpers,\n          settings,\n          in: ids,\n          // this allows us to retry-on-end-of-queue\n          throwFetchErrors: true,\n        })\n\n        const nodes = await Promise.all(\n          allNodesOfContentType.map((node) =>\n            createMediaItemNode({\n              node,\n              helpers,\n              createContentDigest,\n              actions,\n              allMediaItemNodes,\n              referencedMediaItemNodeIds: mediaItemIds,\n              parentName: `Fetching referenced MediaItem nodes by id`,\n            })\n          )\n        )\n\n        resolveFutureNodes(nodes)\n      },\n    })\n  }\n\n  await mediaNodeFetchQueue.onIdle()\n  await mediaFileFetchQueue.onIdle()\n\n  return futureNodes\n}\n\nexport default async function fetchReferencedMediaItemsAndCreateNodes({\n  referencedMediaItemNodeIds,\n  mediaItemUrls,\n}) {\n  const state = store.getState()\n  const queryInfo = state.remoteSchema.nodeQueries.mediaItems\n\n  const { helpers, pluginOptions } = state.gatsbyApi\n  const { createContentDigest, actions } = helpers\n  const { url } = pluginOptions\n  const { typeInfo, settings, selectionSet, builtFragments } = queryInfo\n\n  let createdNodes = []\n\n  if (referencedMediaItemNodeIds?.length) {\n    const nodesSourcedById = await fetchMediaItemsById({\n      mediaItemIds: referencedMediaItemNodeIds,\n      settings,\n      url,\n      selectionSet,\n      builtFragments,\n      createContentDigest,\n      actions,\n      helpers,\n      typeInfo,\n    })\n\n    createdNodes = nodesSourcedById\n  }\n\n  if (mediaItemUrls?.length) {\n    const nodesSourcedByUrl = await fetchMediaItemsBySourceUrl({\n      mediaItemUrls,\n      settings,\n      url,\n      selectionSet,\n      builtFragments,\n      createContentDigest,\n      actions,\n      helpers,\n      typeInfo,\n    })\n\n    createdNodes = [...createdNodes, ...nodesSourcedByUrl]\n  }\n\n  return createdNodes.filter(Boolean)\n}\n"],"file":"fetch-referenced-media-items.js"}
{"version":3,"sources":["../../../src/steps/source-nodes/index.js"],"names":["sourceNodes","helpers","_pluginOptions","cache","webhookBody","preview","nonNodeRootFieldsPromise","lastCompletedSourceTime","get","LAST_COMPLETED_SOURCE_TIME","schemaWasChanged","foundUsableHardCachedData","store","getState","remoteSchema","fetchEverything","set","Date","now","since"],"mappings":";;;;;;;;;AAAA;;AAIA;;AAEA;;AACA;;AACA;;AACA;;AAEA,MAAMA,WAAW,GAAG,OAAOC,OAAP,EAAgBC,cAAhB,KAAmC;AACrD,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,WAAW,EAAE;AAAEC,MAAAA;AAAF;AAFT,MAGFJ,OAHJ;;AAKA,MAAII,OAAJ,EAAa;AACX,UAAM,wCAAN;AAEA;AACD,GAVoD,CAYrD;AACA;;;AACA,QAAMC,wBAAwB,GAAG,+CAAjC;AAEA,QAAMC,uBAAuB,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAUC,qCAAV,CAAtC;;AAEA,QAAM;AACJC,IAAAA,gBADI;AAEJC,IAAAA;AAFI,MAGFC,eAAMC,QAAN,GAAiBC,YAHrB;;AAKA,QAAMC,eAAe,GACnBJ,yBAAyB,IAAI,CAACJ,uBAA9B,IAAyDG,gBAD3D,CAvBqD,CA0BrD;AACA;AACA;;AACA,MAAIK,eAAJ,EAAqB;AACnB,UAAM,yCAAN;AAEA,UAAMd,OAAO,CAACE,KAAR,CAAca,GAAd,CAAkBP,qCAAlB,EAA8CQ,IAAI,CAACC,GAAL,EAA9C,CAAN;AACD,GAJD,CAMA;AACA;AAPA,OAQK,IAAI,CAACH,eAAL,EAAsB;AACzB,YAAM,+BAAyB;AAC7BI,QAAAA,KAAK,EAAEZ;AADsB,OAAzB,CAAN;AAGD;;AAED,QAAMD,wBAAN;AAEA;AACD,CA9CD","sourcesContent":["import fetchAndApplyNodeUpdates, {\n  touchValidNodes,\n} from \"./update-nodes/fetch-node-updates\"\n\nimport { fetchAndCreateAllNodes } from \"./fetch-nodes/fetch-nodes\"\n\nimport { LAST_COMPLETED_SOURCE_TIME } from \"~/constants\"\nimport store from \"~/store\"\nimport fetchAndCreateNonNodeRootFields from \"./create-nodes/fetch-and-create-non-node-root-fields\"\nimport { allowFileDownloaderProgressBarToClear } from \"./create-nodes/create-remote-file-node/progress-bar-promise\"\n\nconst sourceNodes = async (helpers, _pluginOptions) => {\n  const {\n    cache,\n    webhookBody: { preview },\n  } = helpers\n\n  if (preview) {\n    await touchValidNodes()\n\n    return\n  }\n\n  // fetch non-node root fields such as settings.\n  // For now, we're refetching them on every build\n  const nonNodeRootFieldsPromise = fetchAndCreateNonNodeRootFields()\n\n  const lastCompletedSourceTime = await cache.get(LAST_COMPLETED_SOURCE_TIME)\n\n  const {\n    schemaWasChanged,\n    foundUsableHardCachedData,\n  } = store.getState().remoteSchema\n\n  const fetchEverything =\n    foundUsableHardCachedData || !lastCompletedSourceTime || schemaWasChanged\n\n  // If this is an uncached build,\n  // or our initial build to fetch and cache everything didn't complete,\n  // pull everything from WPGQL\n  if (fetchEverything) {\n    await fetchAndCreateAllNodes()\n\n    await helpers.cache.set(LAST_COMPLETED_SOURCE_TIME, Date.now())\n  }\n\n  // If we've already successfully pulled everything from WPGraphQL\n  // just pull the latest changes\n  else if (!fetchEverything) {\n    await fetchAndApplyNodeUpdates({\n      since: lastCompletedSourceTime,\n    })\n  }\n\n  await nonNodeRootFieldsPromise\n\n  allowFileDownloaderProgressBarToClear()\n}\n\nexport { sourceNodes }\n"],"file":"index.js"}
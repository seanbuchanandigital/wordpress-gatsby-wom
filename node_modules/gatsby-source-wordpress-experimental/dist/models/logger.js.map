{"version":3,"sources":["../../src/models/logger.js"],"names":["logger","state","entityCount","typeCount","activityTimers","reducers","incrementActivityTimer","typeName","by","action","count","activity","setStatus","stopActivityTimer","end","createActivityTimer","reporter","pluginOptions","typeActivityTimer","activityTimer","useVerboseStyle","verbose","start"],"mappings":";;;;;AAAA;;AAEA,MAAMA,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE,CADR;AAELC,IAAAA,SAAS,EAAE,EAFN;AAGLC,IAAAA,cAAc,EAAE;AAHX,GADM;AAObC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,sBAAsB,CAACL,KAAD,EAAQ;AAAEM,MAAAA,QAAF;AAAYC,MAAAA,EAAZ;AAAgBC,MAAAA,MAAM,GAAI;AAA1B,KAAR,EAA8C;AAClE,YAAMT,MAAM,GAAGC,KAAK,CAACG,cAAN,CAAqBG,QAArB,CAAf;;AAEA,UAAI,CAACP,MAAL,EAAa;AACX,eAAOC,KAAP;AACD;;AAED,UAAI,OAAOO,EAAP,KAAe,QAAnB,EAA4B;AAC1BR,QAAAA,MAAM,CAACU,KAAP,IAAgBF,EAAhB;AACAP,QAAAA,KAAK,CAACC,WAAN,IAAqBM,EAArB;AACD;;AAEDR,MAAAA,MAAM,CAACW,QAAP,CAAgBC,SAAhB,CAA2B,GAAEH,MAAO,IAAGT,MAAM,CAACU,KAAM,EAApD;AAEA,aAAOT,KAAP;AACD,KAhBO;;AAkBRY,IAAAA,iBAAiB,CAACZ,KAAD,EAAQ;AAAEM,MAAAA,QAAF;AAAYE,MAAAA,MAAM,GAAI;AAAtB,KAAR,EAA0C;AACzD,YAAMT,MAAM,GAAGC,KAAK,CAACG,cAAN,CAAqBG,QAArB,CAAf;;AAEA,UAAIP,MAAM,CAACU,KAAP,KAAiB,CAArB,EAAwB;AACtBV,QAAAA,MAAM,CAACW,QAAP,CAAgBC,SAAhB,CAA2B,GAAEH,MAAO,IAApC;AACD;;AAEDT,MAAAA,MAAM,CAACW,QAAP,CAAgBG,GAAhB;AAEA,aAAOb,KAAP;AACD,KA5BO;;AA8BRc,IAAAA,mBAAmB,CAACd,KAAD,EAAQ;AAAEM,MAAAA,QAAF;AAAYS,MAAAA,QAAZ;AAAsBC,MAAAA;AAAtB,KAAR,EAA+C;AAChE,UAAIhB,KAAK,CAACG,cAAN,CAAqBG,QAArB,CAAJ,EAAoC;AAClC,eAAON,KAAP;AACD;;AAED,YAAMiB,iBAAiB,GAAG;AACxBR,QAAAA,KAAK,EAAE,CADiB;AAExBC,QAAAA,QAAQ,EAAEK,QAAQ,CAACG,aAAT,CACR,wCAAiBZ,QAAjB,EAA2B;AACzBa,UAAAA,eAAe,EAAEH,aAAa,CAACI;AADN,SAA3B,CADQ;AAFc,OAA1B;;AASA,UAAIJ,aAAa,CAACI,OAAlB,EAA2B;AACzBH,QAAAA,iBAAiB,CAACP,QAAlB,CAA2BW,KAA3B;AACD;;AAEDrB,MAAAA,KAAK,CAACG,cAAN,CAAqBG,QAArB,IAAiCW,iBAAjC;AAEA,aAAOjB,KAAP;AACD;;AAnDO;AAPG,CAAf;eA8DeD,M","sourcesContent":["import { formatLogMessage } from \"~/utils/format-log-message\"\n\nconst logger = {\n  state: {\n    entityCount: 0,\n    typeCount: {},\n    activityTimers: {},\n  },\n\n  reducers: {\n    incrementActivityTimer(state, { typeName, by, action = `fetched` }) {\n      const logger = state.activityTimers[typeName]\n\n      if (!logger) {\n        return state\n      }\n\n      if (typeof by === `number`) {\n        logger.count += by\n        state.entityCount += by\n      }\n\n      logger.activity.setStatus(`${action} ${logger.count}`)\n\n      return state\n    },\n\n    stopActivityTimer(state, { typeName, action = `fetched` }) {\n      const logger = state.activityTimers[typeName]\n\n      if (logger.count === 0) {\n        logger.activity.setStatus(`${action} 0`)\n      }\n\n      logger.activity.end()\n\n      return state\n    },\n\n    createActivityTimer(state, { typeName, reporter, pluginOptions }) {\n      if (state.activityTimers[typeName]) {\n        return state\n      }\n\n      const typeActivityTimer = {\n        count: 0,\n        activity: reporter.activityTimer(\n          formatLogMessage(typeName, {\n            useVerboseStyle: pluginOptions.verbose,\n          })\n        ),\n      }\n\n      if (pluginOptions.verbose) {\n        typeActivityTimer.activity.start()\n      }\n\n      state.activityTimers[typeName] = typeActivityTimer\n\n      return state\n    },\n  },\n}\n\nexport default logger\n"],"file":"logger.js"}
{"version":3,"sources":["../../src/models/remoteSchema.js"],"names":["remoteSchema","state","wpUrl","nodeQueries","nonNodeQuery","introspectionData","schemaWasChanged","typeMap","nodeListFilter","field","name","ingestibles","nodeListRootFields","nodeInterfaceTypes","nonNodeRootFields","fetchedTypes","Map","fieldBlacklist","fieldAliases","parent","children","internal","plugin","actionOptions","reducers","setSchemaWasChanged","payload","addFieldsToBlackList","setState","addFetchedType","type","key","get","kind","possibleTypes","length","set"],"mappings":";;;;;AAAA;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,IADF;AAELC,IAAAA,WAAW,EAAE,EAFR;AAGLC,IAAAA,YAAY,EAAE,IAHT;AAILC,IAAAA,iBAAiB,EAAE,IAJd;AAKLC,IAAAA,gBAAgB,EAAE,IALb;AAMLC,IAAAA,OAAO,EAAE,IANJ;AAOLC,IAAAA,cAAc,EAAGC,KAAD,IAAWA,KAAK,CAACC,IAAN,KAAgB,OAPtC;AAQLC,IAAAA,WAAW,EAAE;AACXC,MAAAA,kBAAkB,EAAE,IADT;AAEXC,MAAAA,kBAAkB,EAAE,IAFT;AAGXC,MAAAA,iBAAiB,EAAE;AAHR,KARR;AAaLC,IAAAA,YAAY,EAAE,IAAIC,GAAJ,EAbT;AAcLC,IAAAA,cAAc,EAAE,CACb,YADa,EAEb,OAFa,EAGd;AACC,eAJa,EAKb,wBALa,EAMb,cANa,EAOb,mBAPa,EAQb,cARa,EASb,iBATa,EAUb,eAVa,EAWb,UAXa,EAYb,YAZa,EAab,SAba,EAcb,WAda,EAeb,2BAfa,EAgBb,mBAhBa,EAiBb,iBAjBa,CAdX;AAiCL;AACAC,IAAAA,YAAY,EAAE;AACZC,MAAAA,MAAM,EAAG,UADG;AAEZC,MAAAA,QAAQ,EAAG,YAFC;AAGZC,MAAAA,QAAQ,EAAG,YAHC;AAIZC,MAAAA,MAAM,EAAG,UAJG;AAKZC,MAAAA,aAAa,EAAG;AALJ;AAlCT,GADY;AA4CnBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,CAACxB,KAAD,EAAQyB,OAAR,EAAiB;AAClCzB,MAAAA,KAAK,CAACK,gBAAN,GAAyB,CAAC,CAACoB,OAA3B;AAEA,aAAOzB,KAAP;AACD,KALO;;AAOR0B,IAAAA,oBAAoB,CAAC1B,KAAD,EAAQyB,OAAR,EAAiB;AACnCzB,MAAAA,KAAK,CAACgB,cAAN,GAAuB,CAAC,GAAGhB,KAAK,CAACgB,cAAV,EAA0B,GAAGS,OAA7B,CAAvB;AACA,aAAOzB,KAAP;AACD,KAVO;;AAYR2B,IAAAA,QAAQ,CAAC3B,KAAD,EAAQyB,OAAR,EAAiB;AACvBzB,MAAAA,KAAK,qBACAA,KADA,EAEAyB,OAFA,CAAL;AAKA,aAAOzB,KAAP;AACD,KAnBO;;AAqBR4B,IAAAA,cAAc,CAAC5B,KAAD,EAAQ6B,IAAR,EAAc;AAC1B,YAAMC,GAAG,GAAG,2BAAaD,IAAb,CAAZ;;AAEA,UAAI,CAACC,GAAL,EAAU;AACR,eAAO9B,KAAP;AACD;;AAED6B,MAAAA,IAAI,GAAG7B,KAAK,CAACM,OAAN,CAAcyB,GAAd,CAAkBD,GAAlB,CAAP,CAP0B,CAS1B;AACA;;AACA,UAAID,IAAI,IAAIA,IAAI,CAACG,IAAL,KAAe,OAAvB,IAAiCH,IAAI,CAACI,aAAL,CAAmBC,MAAnB,KAA8B,CAAnE,EAAsE;AACpE,eAAOlC,KAAP;AACD;;AAEDA,MAAAA,KAAK,CAACc,YAAN,CAAmBqB,GAAnB,CAAuBL,GAAvB,EAA4BD,IAA5B;AAEA,aAAO7B,KAAP;AACD;;AAvCO;AA5CS,CAArB;eAuFeD,Y","sourcesContent":["import { findTypeName } from \"~/steps/create-schema-customization/helpers\"\n\nconst remoteSchema = {\n  state: {\n    wpUrl: null,\n    nodeQueries: {},\n    nonNodeQuery: null,\n    introspectionData: null,\n    schemaWasChanged: null,\n    typeMap: null,\n    nodeListFilter: (field) => field.name === `nodes`,\n    ingestibles: {\n      nodeListRootFields: null,\n      nodeInterfaceTypes: null,\n      nonNodeRootFields: [],\n    },\n    fetchedTypes: new Map(),\n    fieldBlacklist: [\n      `isWpGatsby`,\n      `edges`,\n      // these aren't useful without authentication\n      `revisions`,\n      `isJwtAuthSecretRevoked`,\n      `isRestricted`,\n      `jwtAuthExpiration`,\n      `jwtAuthToken`,\n      `jwtRefreshToken`,\n      `jwtUserSecret`,\n      `editLock`,\n      `revisionOf`,\n      `preview`,\n      `isPreview`,\n      `previewRevisionDatabaseId`,\n      `previewRevisionId`,\n      `editingLockedBy`,\n    ],\n    // @todo make this a plugin option\n    fieldAliases: {\n      parent: `wpParent`,\n      children: `wpChildren`,\n      internal: `wpInternal`,\n      plugin: `wpPlugin`,\n      actionOptions: `wpActionOptions`,\n    },\n  },\n\n  reducers: {\n    setSchemaWasChanged(state, payload) {\n      state.schemaWasChanged = !!payload\n\n      return state\n    },\n\n    addFieldsToBlackList(state, payload) {\n      state.fieldBlacklist = [...state.fieldBlacklist, ...payload]\n      return state\n    },\n\n    setState(state, payload) {\n      state = {\n        ...state,\n        ...payload,\n      }\n\n      return state\n    },\n\n    addFetchedType(state, type) {\n      const key = findTypeName(type)\n\n      if (!key) {\n        return state\n      }\n\n      type = state.typeMap.get(key)\n\n      // union types with no member types will cause schema customization errors\n      // @todo move this to a better place. This should be excluded before it gets to this point.\n      if (type && type.kind === `UNION` && type.possibleTypes.length === 0) {\n        return state\n      }\n\n      state.fetchedTypes.set(key, type)\n\n      return state\n    },\n  },\n}\n\nexport default remoteSchema\n"],"file":"remoteSchema.js"}
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

const axios = require('axios');

const chalk = require('chalk');

const oauthSignature = require('oauth-signature');

const _require = require('./routes'),
      routes = _require.routes;

const _require2 = require('./helpers'),
      isObjEmpty = _require2.isObjEmpty,
      slugify = _require2.slugify;

const _require3 = require('./oAuthParameters'),
      new0AuthParameters = _require3.new0AuthParameters;

const log = console.log; // Get list of all forms from GF

function getForms(_x, _x2) {
  return _getForms.apply(this, arguments);
} // Get form fields from GF


function _getForms() {
  _getForms = (0, _asyncToGenerator2.default)(function* (api, baseUrl) {
    log(chalk.black.bgWhite('Fetching form ids'));
    const authParams = new0AuthParameters(api.key);
    let result;

    try {
      const signature = oauthSignature.generate('GET', baseUrl + routes.wp + routes.gf + routes.forms, authParams, api.secret);
      result = yield axios.get(baseUrl + routes.wp + routes.gf + routes.forms, {
        responseType: 'json',
        params: Object.assign({}, authParams, {
          oauth_signature: signature
        })
      });
    } catch (err) {
      apiErrorHandler(err); // Kill the plugin

      return false;
    }

    return result.data;
  });
  return _getForms.apply(this, arguments);
}

function getFormFields(_x3, _x4, _x5) {
  return _getFormFields.apply(this, arguments);
}

function _getFormFields() {
  _getFormFields = (0, _asyncToGenerator2.default)(function* (api, baseUrl, form) {
    log(chalk.black.bgWhite(`Fetching fields for form ${form.id}`));
    let authParams = new0AuthParameters(api.key);
    let result;
    const apiURL = baseUrl + routes.wp + routes.gf + routes.forms + '/' + form.id; // Make a new signature

    const signature = oauthSignature.generate('GET', apiURL, authParams, api.secret);

    try {
      result = yield axios.get(baseUrl + routes.wp + routes.gf + routes.forms + '/' + form.id, {
        responseType: 'json',
        params: Object.assign({}, authParams, {
          oauth_signature: signature
        })
      });
    } catch (err) {
      apiErrorHandler(err); // Kill the plugin

      return false;
    }

    result.data['slug'] = slugify(form.title);
    result.data['apiURL'] = apiURL;
    return result.data;
  });
  return _getFormFields.apply(this, arguments);
}

function getFormsAndFields(_x6, _x7, _x8) {
  return _getFormsAndFields.apply(this, arguments);
}

function _getFormsAndFields() {
  _getFormsAndFields = (0, _asyncToGenerator2.default)(function* (basicAuth, api, baseUrl) {
    let formObj = {}; // First get forms in list

    let allForms = yield getForms(api, baseUrl); // If there are forms to move with

    if (allForms) {
      if (!isObjEmpty(allForms)) {
        for (var _i = 0, _Object$entries = Object.entries(allForms); _i < _Object$entries.length; _i++) {
          const _Object$entries$_i = _Object$entries[_i],
                key = _Object$entries$_i[0],
                value = _Object$entries$_i[1];
          // Clone form object
          let currentForm = Object.assign({}, allForms[key]); // remove unneeded key

          delete currentForm.entries;
          let form = yield getFormFields(api, baseUrl, currentForm);
          formObj['form-' + currentForm.id] = form;
        }
      } else {
        log(chalk.bgRed('We could not find any forms. Have you made any?'));
      }

      return formObj;
    }

    return false;
  });
  return _getFormsAndFields.apply(this, arguments);
}

function apiErrorHandler(error) {
  if (error.response) {
    // The request was made and the server responded with a status code
    // that falls out of the range of 2xx
    log(chalk.bgRed('Request was made, but there was an issue'));
    log(error.response.data);
    log(error.response.status);
    log(error.response.headers);
  } else if (error.request) {
    // The request was made but no response was received
    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
    // http.ClientRequest in node.js
    log(chalk.bgRed('Request was made, but no response'));
    log(error.request);
  } else {
    // Something happened in setting up the request that triggered an Error
    log(chalk.bgRed('Something happened setting up the request'));
    log('Error', error.message);
  }
}

module.exports = {
  getFormsAndFields
};